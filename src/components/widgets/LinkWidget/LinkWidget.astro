---
import type { StylesProfile } from "../../../types/styles-profile";
import type { LinkWidget } from "../../../types/widget";
import './LinkWidget.scss'
interface Props {
    widget:LinkWidget
    styles: StylesProfile
}
const { widget, styles } = Astro.props as Props;

function convertHexToRgba(hex: string, transparency: number): string {
  // Validar el hexadecimal
  const validHex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
  const match = hex.match(validHex);

  if (!match) {
    console.warn('Color inválido:', hex);
    return hex; // Devuelve el color original si no es válido
  }

  // Extraer los valores de R, G, B
  const r = parseInt(match[1], 16);
  const g = parseInt(match[2], 16);
  const b = parseInt(match[3], 16);

  // Convertir el porcentaje de transparencia (0-100) a opacidad (0-1)
  const alpha = Math.max(0, Math.min(transparency / 100, 1));

  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

// Obtener el color en formato rgba
const rgbaColor = convertHexToRgba( styles.buttonColor || '#2b2b2b' , styles.buttonOpacity || 20 );
  

---

<a
  href={widget.url}
  class={`link-widget ${styles.buttonShape || ''} ${widget.vibrate ? widget.animation || 'vibrate' : ''} ${widget.stylesButton || 'style1'}`}
  style={`background-color: ${widget.activeColor ? widget.backgroundColor || styles.fontColor : styles.buttonColorTransparent ? rgbaColor : styles.buttonColor}; 
          color: ${widget.activeColor ? widget.colorFont || styles.fontColor : styles.buttonTextColor ? styles.buttonTextColor  : styles.fontColor }; 
          box-shadow: ${styles.boxShadow}; 
          border: ${styles.buttonBorder ? `${(styles.borderWidth == null ? '1px' : styles.borderWidth  )  || 1 }px solid ${styles.buttonColorBorder}` : 'none'};`}
>
  <div class="content-first-icon">
    {widget.activeImage ? (
      <img class="image" src={widget.urlImage} alt="" />
    ) : (
      <i class={widget.icon || 'fa-solid fa-link'}></i>
    )}
  </div>
  <div class="content-name-link">
    <p style={`font-family: ${widget.font || ''}; font-weight: ${widget.weightFont || ''};`} class="name-link">
      {widget.name || 'Visita mi web'}
    </p>
  </div>
  {widget.stylesButton === 'style2' && (
    <div class="content-second-icon">
      <i class="fa-solid fa-arrow-right second-icon"></i>
    </div>
  )}
  {widget.stylesButton === 'style3' && (
    <div class="content-second-icon">
      {widget.activeSecundaryTex ? (
        <div
          class={`content-secundary-text ${styles.buttonShape || ''}`}
          style={`background-color: ${widget.activeColorSecondaryText ? widget.backgroundColorSecondaryText : styles.buttonColor}; 
                  color: ${widget.activeColorSecondaryText ? widget.colorFontSecondary : styles.fontColor};`}
        >
          {widget.subtitleSecondaryText && <p class="subtitle">{widget.subtitleSecondaryText}</p>}
          {widget.secondaryTex && <p class="text">{widget.secondaryTex}</p>}
        </div>
      ) : (
        <i class="fa-solid fa-arrow-right second-icon"></i>
      )}
    </div>
  )}
</a>
<style>
    
</style>