---
import type { StylesProfile } from "../../../types/styles-profile";
import CardPost from "../../CardPost/CardPost.astro";
import LinkWidget from "../LinkWidget/LinkWidget.astro";
import type { WidgetListConfig } from "../../../types/widget";
import './SectionWidget.scss'
interface Props {
    widget: WidgetListConfig,
    styles : StylesProfile,
}

const {widget, styles} = Astro.props as Props;
---
<div class="content-title">
    {widget.showIcon && (
        <div
        class="content-icon"
        class:list={[
            styles.buttonShape
        ]}
        style={`
              color: ${ styles.isActiveIconColor ? (styles.iconColor || styles?.fontColor ) : styles?.fontColor };
              background-color: ${
                styles?.isActiveBackgroundIconColor
                  ? (styles.iconBackgroundColor || styles?.buttonColor )
                  : 'transparent'
              };`}
        >
            <i class={widget.icon}></i>
        </div>
     ) }
     <p class="title-section" >{widget.name}</p>
</div>


    <div 
        class="content-section-widget-section"
        class:list={[
            widget.layoutStyle || 'list',
            styles.adaptativeProfile ? 'desktop' : ''
        ]}
        >
        {widget.widgets.map((wid, index)=>{
            if(wid.type == 'post'){
                return <div class="widget post">
                    <CardPost idWidget={widget.id} subWidget={true} post={wid} styles={styles} styleCard={wid.cardStyle!} ></CardPost>
                </div>
            }
            if(wid.type=='link'){
                return <LinkWidget widget={wid} styles={styles} />
            }
        } )}

    </div>
